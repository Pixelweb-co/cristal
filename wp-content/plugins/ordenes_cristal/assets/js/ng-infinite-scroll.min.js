var mod;

mod = angular.module('infinite-scroll', []);
mod.directive('infiniteScroll', [
  '$rootScope', '$window', '$timeout', function($rootScope, $window, $timeout) {
    return {
      link: function(scope, elem, attrs) {
        var checkWhenEnabled, handler, scrollDistance, scrollEnabled;
        $window = angular.element($window);
        scrollDistance = 0;

        if (attrs.infiniteScrollDistance != null) {
          scope.$watch(attrs.infiniteScrollDistance, function(value) {
            scrollDistance = parseInt(value, 10);
          });
        }

        scrollEnabled = true;
        checkWhenEnabled = false;

        if (attrs.infiniteScrollDisabled != null) {
          scope.$watch(attrs.infiniteScrollDisabled, function(value) {
            scrollEnabled = !value;
            if (scrollEnabled && checkWhenEnabled) {
              checkWhenEnabled = false;
              return handler();
            }
          });
        }

        handler = function() {
          var elementBottom, remaining, shouldScroll, windowBottom;
          windowBottom = window.innerHeight + window.pageYOffset;
          elementBottom = angular.element(elem).offset().top + angular.element(elem).height();
          remaining = elementBottom - windowBottom;
          shouldScroll = remaining <= $window.height() * scrollDistance;

          if (Math.round(remaining) <= 2) { // Llegó al fondo de la página
            if ($rootScope.$$phase) {
              scope.$eval(attrs.infiniteScroll);
            } else {
              scope.$apply(attrs.infiniteScroll);
            }
            checkWhenEnabled = false; // Desactiva la comprobación para que no se llame múltiples veces
          } else if (shouldScroll) {
            checkWhenEnabled = true;
          }
        };

        $window.on('scroll', handler);

        scope.$on('$destroy', function() {
          $window.off('scroll', handler);
        });

        $timeout(function() {
          if (attrs.infiniteScrollImmediateCheck) {
            if (scope.$eval(attrs.infiniteScrollImmediateCheck)) {
              handler();
            }
          } else {
            handler();
          }
        }, 0);
      }
    };
  }
]);
